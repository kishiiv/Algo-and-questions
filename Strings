//Generate Parenthesis:

class Solution {
public:
    vector <string> res;
    void helper(string s , int left , int more)
    {
        //base condition
        if(left==0 && more==0)
        {
            res.push_back(s);
            //return res;
        }
        
        if(left>0)
             helper(s+'(' , left-1 , more+1);
        if(more>0)
             helper(s+')' , left , more-1);
    }
    vector<string> generateParenthesis(int n)
    {
       helper("",n,0);
       return res;
    }
};




-----------------------------------
class Solution {
public:

  void solve(int open, int close, vector<string> &vec , string op){

      if(open==0 && close ==0){
          vec.push_back(op);
      }

      if(open != 0){
         string op1;
        op1 = op + '(';
        solve(open-1,close,vec,op1);

      }


      if(close > open){

        string op1;
        op1 = op + ')';
        solve(open,close-1,vec,op1);

      }


    }


    vector<string> generateParenthesis(int n) {
        int open=n;
        int close=n;
        vector <string> vec;
        string op;

        solve (open,close,vec,op);
        return vec;
    }
};

----------------------------------
